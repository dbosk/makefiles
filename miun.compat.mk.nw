\label{miun.compat.mk}
\section{Introduction}

This entire makefile collection grew out of a set of generic makefiles for 
handling course material that I started to develop at Mid Sweden University 
(MIUN), starting back in 2011.
In 2014 I started my PhD in KTH Royal Institute of Technology and I started to 
add some research oriented parts and by 2016 I refactored everything and rewrote 
it using literate programming.
A lot of my material still depends on the original MIUN structure, the aim of 
this file is to map the old \enquote{MIUN API} to the current one.

We will create a file [[<<miun.compat.mk>>]] which will implement the old API 
using the new.
We let [[<<miun.compat.mk>>]] implement each old module as a code block.
<<miun.compat.mk>>=
ifndef MIUN_COMPAT_MK
MIUN_COMPAT_MK=true

<<miun.subdir.mk>>
<<miun.package.mk>>
<<miun.pub.mk>>
<<miun.export.mk>>
<<miun.tex.mk>>
<<miun.docs.mk>>
<<miun.course.mk>>
<<miun.results.mk>>
<<miun.depend.mk>>

endif
@ This way we can create separate files containing only the individual parts 
too.
Then we do not have to modify old [[Makefile]]s to include [[miun.compat.mk]].


\section{miun.subdir.mk}

The code to recurse through subdirectories is essentially the same, it has no 
API, so we simply include it using the recommended way.
<<miun.subdir.mk>>=
ifndef MIUN_SUBDIR_MK
MIUN_SUBDIR_MK=true

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/subdir.mk

endif # MIUN_SUBDIR_MK
@


\section{miun.package.mk}

We will base the old interface on revision 448 in the original internal MIUN 
repo, i.e.\ dated 2014-11-18 16:14:21Z.
The current version of [[pkg.mk]] already maps the interface quite well, so we 
only have to map the last few parts and include the new include file.
<<miun.package.mk>>=
ifndef MIUN_PACKAGE_MK
MIUN_PACKAGE_MK=true

ifdef TARBALL_NAME
PKG_TARBALL?=${TARBALL_NAME}.tar.gz
endif

ifdef DOCS_FILES
PKG_PACKAGES=	 main docs

PKG_INSTALL_FILES-docs?=${DOCS_FILES}
PKG_INSTALL_DIR-docs?=${DOCSDIR}
endif

.PHONY: all
all: package

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/pkg.mk

endif # MIUN_PACKAGE_MK
@


\section{miun.pub.mk}

We will base the old interface on revision 448 in the original internal MIUN 
repo, i.e.\ dated 2014-11-18 16:14:21Z.
The current version of [[pub.mk]] already maps the interface quite well, so we 
only have to set the old defaults, map the last few variables and include the 
new include file.
<<miun.pub.mk>>=
ifndef MIUN_PUB_MK
MIUN_PUB_MK=true

SERVER?=		ver.miun.se
PUBDIR?=		/srv/web/svn
CATEGORY?=
TMPDIR?=		/var/tmp
PUB_GROUP?= svn

ifdef NO_COMMIT
PUB_AUTOCOMMIT?=${NO_COMMIT}
endif

ifdef COMMIT_OPTS
PUB_COMMIT_OPTS?=${COMMIT_OPTS}
endif

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/pub.mk

endif # MIUN_PUB_MK
@


\section{miun.export.mk}

We will base the old interface on revision 287 in the original internal MIUN 
repo, i.e.\ dated 2013-01-21 23:27:17Z.
<<miun.export.mk>>=
ifndef MIUN_EXPORT_MK
MIUN_EXPORT_MK=true

TRANSFORM_SRC=    .tex
TRANSFORM_DST=    .exporttex

TRANSFORM_LIST.exporttex=         NoSolutions
TRANSFORM_LIST-Makefile.export=   OldExportFilter ExportFilter

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/transform.mk

endif # MIUN_EXPORT_MK
@


\section{miun.tex.mk}

We will base the old interface on revision 450 in the original internal MIUN 
repo, i.e.\ dated 2014-11-26 12:21:11Z.
It is only the [[submission]] target that is not implemented from that version.
<<miun.tex.mk>>=
ifndef MIUN_TEX_MK
MIUN_TEX_MK=true

TEX_OUTDIR?=  .

TEXMF?=		    ${HOME}/texmf

ifneq (${USE_LATEXMK},yes)
LATEX?=       latex
PDFLATEX?=    pdflatex
endif

ifneq (${USE_BIBLATEX},yes)
TEX_BBL=      yes
endif

solutions?=   no
handout?=     no

TRANSFORM_SRC=  .tex

ifeq (${solutions},yes)
TRANSFORM_DST+= .solutions.tex
TRANSFORM_LIST.solutions.tex=PrintAnswers

%.pdf: %.solutions.pdf
	${LN} $< $@
endif

ifeq (${handout},yes)
TRANSFORM_DST+= .handout.tex
TRANSFORM_LIST.handout.tex=Handout

%.pdf: %.handout.pdf
	${LN} $< $@
endif

.PHONY: all
all: ${DOCUMENTS}

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/tex.mk
include ${INCLUDE_MAKEFILES}/transform.mk

endif # MIUN_TEX_MK
@


\section{miun.docs.mk}

We will base the old interface on revision 423 in the original internal MIUN 
repo, i.e.\ dated 2014-05-09 09:36:13Z.
<<miun.docs.mk>>=
ifndef MIUN_DOCS_MK
MIUN_DOCS_MK=true

DOCUMENTS?=
PUB_FILES?=   ${DOCUMENTS}
SERVER?=      ver.miun.se
PUBDIR?=      /srv/web/svn/dokument
CATEGORY?=	

ifdef PRINT
LPR?=         ${PRINT}
endif

.PHONY: all
all: ${DOCUMENTS}

.PHONY: print
print: ${DOCUMENTS:.pdf=.ps}

.PHONY: clean-docs
clean-docs:
ifneq (${DOCUMENTS},)
	${RM} ${DOCUMENTS}
endif

.PHONY: clean
clean: clean-docs

.PHONY: todo
todo: $(wildcard *)

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/miun.tex.mk
include ${INCLUDE_MAKEFILES}/miun.pub.mk

endif # MIUN_DOCS_MK
@


\section{miun.course.mk}

We will base the old interface on revision 423 in the original internal MIUN 
repo, i.e.\ dated 2014-05-09 09:36:13Z.
<<miun.course.mk>>=
ifndef MIUN_COURSE_MK
MIUN_COURSE_MK=true

DOCUMENTS?=
PUB_FILES?=   ${DOCUMENTS}
SERVER?=      ver.miun.se
PUBDIR?=      /srv/web/svn/courses
CATEGORY?=	

.PHONY: all
all: ${DOCUMENTS}

.PHONY: clean-course
clean-course:
ifneq (${DOCUMENTS},)
	${RM} ${DOCUMENTS}
endif

.PHONY: clean
clean: clean-course

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/miun.docs.mk
include ${INCLUDE_MAKEFILES}/miun.export.mk

endif # MIUN_COURSE_MK
@


\section{miun.results.mk}

We will base the old interface on revision 448 in the original internal MIUN 
repo, i.e.\ dated 2014-11-18 16:14:21Z.
<<miun.results.mk>>=
ifndef MIUN_RESULTS_MK
MIUN_RESULTS_MK=true

in?=              ${COURSE}.txt
out?=              reported.csv
report?=          new_results.pdf

RESULTS_COURSE?=  ${COURSE}
RESULTS_EMAIL?=   ${EXPADDR}

MAILER?=	thunderbird -compose \
  "to=${EXPADDR},subject='resultat ${COURSE}',attachment='file://${report}'"
RESULTS_MAILER?=  ${MAILER}

REWRITES?=	"s/Godkänd(G)/G/g" "s/Underkänd(U)/U/g" "s/Komplettering(Fx)/Fx/g"
RESULTS_REWRITES?=${REWRITES}

FAILED?=	-\|Fx\?\|U
RESULTS_FAILED?=  ${FAILED}

FAILED_regex=	"	\(${FAILED}\)\(	.*\)*$$"
RESULTS_FAILED_regex?=${FAILED_regex}

INCLUDE_MAKEFILES?=.
include ${INCLUDE_MAKEFILES}/results.mk

endif # MIUN_RESULTS_MK
@


\section{miun.depend.mk}

We will base the old interface on revision 464 in the original internal MIUN 
repo, i.e.\ dated 2015-05-26 12:51:03Z.
However, we will adapt it to the new way of adding them as a Git submodule to 
use them, instead of installation or download from the University servers.
Also, the dependencies for Springer, ACM etc.\ has been removed.
That is also the case for the things that now resides in [[portability.mk]].
<<miun.depend.mk>>=
ifndef MIUN_DEPEND_MK
MIUN_DEPEND_MK=true

CONF?= 	/etc/mk.conf
-include ${CONF}

CURRENT_URL=https://github.com/dbosk/miuntex/releases/download/v1.0


.PHONY: clean-depends


### MIUN Miscellanous package and Logo ###

miunmisc-depend?= 	${TEXMF}/tex/latex/miun/miunmisc/miunmisc.sty
logo-depend?=		${TEXMF}/tex/latex/miun/miunmisc/MU_logotyp_int_sv.eps \
					${TEXMF}/tex/latex/miun/miunmisc/MU_logotyp_int_CMYK.eps

${miunmisc-depend} ${logo-depend}:
	wget -O /tmp/miunmisc.tar.gz \
		http://ver.miun.se/latex/packages/miunmisc.tar.gz
	cd /tmp && tar -zxf miunmisc.tar.gz
	cd /tmp/miunmisc && ${MAKE} install

MIUNMISC_FILES= 	MU_logotyp_int_CMYK.eps MU_logotyp_int_CMYK.pdf
MIUNMISC_FILES+= 	MU_logotyp_int_sv.eps MU_logotyp_int_sv.pdf
MIUNMISC_FILES+= 	miunmisc.sty miunmisc-Swedish.dict miunmisc-English.dict

${INCLUDE_MIUNTEX}/miunmisc/miunmisc.sty:
	${MAKE} -C ${INCLUDE_MIUNTEX}/miunmisc miunmisc.sty

${INCLUDE_MIUNTEX}/miunmisc/miunmisc-Swedish.dict:
	${MAKE} -C ${INCLUDE_MIUNTEX}/miunmisc miunmisc-Swedish.dict

${INCLUDE_MIUNTEX}/miunmisc/miunmisc-English.dict:
	${MAKE} -C ${INCLUDE_MIUNTEX}/miunmisc miunmisc-English.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNMISC_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunmisc/$f))
${MIUNMISC_FILES}:
	ln -s $^ $@
else
${MIUNMISC_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunmisc miunlogo
miunlogo: MU_logotyp_int_CMYK.eps MU_logotyp_int_CMYK.pdf
miunlogo: MU_logotyp_int_sv.eps MU_logotyp_int_sv.pdf

miunmisc: miunmisc.sty miunmisc-English.dict miunmisc-Swedish.dict
miunmisc: miunlogo

.PHONY: clean-miunmisc clean-miunlogo
clean-depends: clean-miunmisc clean-miunlogo
clean-miunmisc: clean-tex
	${RM} ${MIUNMISC_FILES}
	${RM} miunmisc.sty miunmisc-English.dict miunmisc-Swedish.dict
clean-miunlogo:
	${RM} MU_logotyp_int_CMYK.eps MU_logotyp_int_CMYK.pdf
	${RM} MU_logotyp_int_sv.eps MU_logotyp_int_sv.pdf


### MIUN Article class ###

miunart-depend?= 	${TEXMF}/tex/latex/miun/miunart/miunart.sty
${miunart-depend}:
	wget -O /tmp/miunart.tar.gz \
		http://ver.miun.se/latex/packages/miunart.tar.gz
	cd /tmp && tar -zxf miunart.tar.gz
	cd /tmp/miunart && ${MAKE} install

MIUNART_FILES= miunart.cls miunart-English.dict miunart-Swedish.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNART_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunart/$f))
${MIUNART_FILES}:
	ln -s $^ $@
else
${MIUNART_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunart
miunart: ${MIUNART_FILES} miunlogo

.PHONY: clean-miunart
clean-depends: clean-miunart
clean-miunart:
	${RM} ${MIUNART_FILES}


### MIUN Assignment class ###

miunasgn-depend?= 	${TEXMF}/tex/latex/miun/miunasgn/miunasgn.sty
${miunasgn-depend}:
	wget -O /tmp/miunasgn.tar.gz \
		http://ver.miun.se/latex/packages/miunasgn.tar.gz
	cd /tmp && tar -zxf miunasgn.tar.gz
	cd /tmp/miunasgn && ${MAKE} install

MIUNASGN_FILES= miunasgn.cls miunasgn-English.dict miunasgn-Swedish.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNASGN_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunasgn/$f))
${MIUNASGN_FILES}:
	ln -s $^ $@
else
${MIUNASGN_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunasgn
miunasgn: ${MIUNASGN_FILES} miunlogo

.PHONY: clean-miunasgn
clean-depends: clean-miunasgn
clean-miunasgn:
	${RM} ${MIUNASGN_FILES}


### MIUN Exam class ###

miunexam-depend?= 	${TEXMF}/tex/latex/miun/miunexam/miunexam.sty
${miunexam-depend}:
	wget -O /tmp/miunexam.tar.gz \
		http://ver.miun.se/latex/packages/miunexam.tar.gz
	cd /tmp && tar -zxf miunexam.tar.gz
	cd /tmp/miunexam && ${MAKE} install

MIUNEXAM_FILES= miunexam.cls miunexam-English.dict miunexam-Swedish.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNEXAM_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunexam/$f))
${MIUNEXAM_FILES}:
	ln -s $^ $@
else
${MIUNEXAM_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunexam
miunexam: ${MIUNEXAM_FILES} miunlogo

.PHONY: clean-miunexam
clean-depends: clean-miunexam
clean-miunexam:
	${RM} ${MIUNEXAM_FILES}


### MIUN Letter class ###

miunlett-depend?= 	${TEXMF}/tex/latex/miun/miunlett/miunlett.sty
${miunlett-depend}:
	wget -O /tmp/miunlett.tar.gz \
		http://ver.miun.se/latex/packages/miunlett.tar.gz
	cd /tmp && tar -zxf miunlett.tar.gz
	cd /tmp/miunlett && ${MAKE} install

miunlett.cls:
	wget -O $@ ${CURRENT_URL}/$@

.PHONY: miunlett
miunlett: miunlett.cls miunlogo

.PHONY: clean-miunlett
clean-depends: clean-miunlett
clean-miunlett:
	${RM} miunlett.cls


### MIUN Protocol class ###

miunprot-depend?= 	${TEXMF}/tex/latex/miun/miunprot/miunprot.sty
${miunprot-depend}:
	wget -O /tmp/miunprot.tar.gz \
		http://ver.miun.se/latex/packages/miunprot.tar.gz
	cd /tmp && tar -zxf miunprot.tar.gz
	cd /tmp/miunprot && ${MAKE} install

MIUNPROT_FILES= miunprot.cls miunprot-English.dict miunprot-Swedish.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNPROT_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunprot/$f))
${MIUNPROT_FILES}:
	ln -s $^ $@
else
${MIUNPROT_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunprot
miunprot: ${MIUNPROT_FILES} miunlogo

.PHONY: clean-miunprot
clean-depends: clean-miunprot
clean-miunprot:
	${RM} ${MIUNPROT_FILES}


### MIUN Thesis class ###

miunthes-depend?= 	${TEXMF}/tex/latex/miun/miunthes/miunthes.sty
${miunthes-depend}:
	wget -O /tmp/miunthes.tar.gz \
		http://ver.miun.se/latex/packages/miunthes.tar.gz
	cd /tmp && tar -zxf miunthes.tar.gz
	cd /tmp/miunthes && ${MAKE} install

MIUNTHES_FILES= miunthes.cls miunthes-English.dict miunthes-Swedish.dict

ifdef INCLUDE_MIUNTEX
$(foreach f,${MIUNTHES_FILES},$(eval $f: ${INCLUDE_MIUNTEX}/miunthes/$f))
${MIUNTHES_FILES}:
	ln -s $^ $@
else
${MIUNTHES_FILES}:
	wget -O $@ ${CURRENT_URL}/$@
endif

.PHONY: miunthes
miunthes: ${MIUNTHES_FILES} miunlogo latexmkrc

.PHONY: clean-miunthes
clean-depends: clean-miunthes
clean-miunthes:
	${RM} ${MIUNTHES_FILES}


### INCLUDES ###

INCLUDE_MAKEFILES?= .
INCLUDES= 	depend.mk tex.mk

define inc
ifeq ($(findstring $(1),${MAKEFILE_LIST}),)
$(1):
	wget https://raw.githubusercontent.com/dbosk/makefiles/master/$(1)
include ${INCLUDE_MAKEFILES}/$(1)
endif
endef
$(foreach i,${INCLUDES},$(eval $(call inc,$i)))

### END INCLUDES ###

endif # MIUN_DEPEND_MK
@
