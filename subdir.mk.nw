\section{Introduction and usage}

Sometimes we want to recursively descend into subdirectories making a specific 
target in each subdirectory.
The subdirectories must be listed in the variable [[SUBDIR]], which holds 
a space-separated list of directory names.
Then each subdirectory may in turn hold a new set of subdirectories to descend 
into.
We note that the subdirectories will be built in depth-first search order 
(unless we use parallel execution).

By default, we will recurse into the subdirectories in [[SUBDIR]] for any goals 
passed on the command line.
This behaviour can be overridden by changing the value of [[SUBDIR_GOALS]] from 
its default:
<<variables>>=
SUBDIR_GOALS?=${MAKECMDGOALS}
@ Like this we can ensure that we only recurse into the subdirectories only for 
a subset of desired targets.

Any variables that should be passed down to sub-makes should be exported using 
the [[export]] directive of make.

\section{Implementation}

The structure of the file is that of most include files.
We want to ensure that it is not included more than once.
Furthermore, we do not want to do anything unless the [[SUBDIR]] variable, 
containing the space-separated list of subdirectories, exists.
<<subdir.mk>>=
ifndef SUBDIR_MK
SUBDIR_MK=true

<<variables>>

ifdef SUBDIR
<<let the recipe for each subdirectory recurse into it>>
endif

ifneq (${SUBDIR_GOALS},)
<<add subdirectories as prerequisites for the goals>>
endif

endif
@

The thing we want to do is to build the given goals ([[SUBDIR_GOALS]]), \ie the 
targets specified on the command-line by default, in all subdirectories listed 
in [[SUBDIR]].
For each directory, we specify a recipe which runs make in the subdirectory 
with the appropriate goals.
<<let the recipe for each subdirectory recurse into it>>=
${SUBDIR}::
	${MAKE} -C $@ ${actual_goals}
@

Those [[actual_goals]] is the intersection of the goals specified on the 
command-line and those specified in [[SUBDIR_GOALS]].
<<variables>>=
actual_goals=$(sort $(filter ${SUBDIR_GOALS},${MAKECMDGOALS}))
@ To ensure these recipes are run we need to ensure that they are prerequisites
to those goals.
<<add subdirectories as prerequisites for the goals>>=
ifneq (${actual_goals},)
.PHONY: ${actual_goals}
${actual_goals}: ${SUBDIR}
endif
@

Finally, we must consider the case of the default goal, \ie no goal is 
specified on the command line.
In this case we simply check if the default goal ([[.DEFAULT_GOAL]]) is among 
the desired goals ([[SUBDIR_GOALS]]).
<<add subdirectories as prerequisites for the goals>>=
ifneq ($(filter ${.DEFAULT_GOAL},${SUBDIR_GOALS}),)
.PHONY: ${.DEFAULT_GOAL}
${.DEFAULT_GOAL}: ${SUBDIR}
endif
@ We note that if we specify no goals on the command line, then 
[[actual_goals]] will be the empty string.
This means that we execute the default goal in each subdirectory recursively: 
\eg if the current default goal is [[all]], but its [[clean]] in a 
subdirectory, then we will execute [[all]] here but [[clean]] there --- not 
[[all]] in both places.
