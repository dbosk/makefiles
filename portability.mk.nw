\label{portability.mk}
\section{Introduction}

The purpose of this include file is to improve portability of the include 
files.
The make(1) utility itself already provides certain portability between 
platforms, here we want to extend this portability.
I.e.\ we provide variables which substitute to system-specific commands which 
corresponds to the expected action.
For instance, MacOS uses an ancient version of [[unzip]], a version which does 
not support the option [[-DD]] which is desirable.
So, on MacOS the variable [[UNZIP]] will substitute to [[unzip]] which on other
systems it will substitute to [[unzip -DD]].
Another examples is BSD-systems, which does not use the GNU versions of [[sed]]
and [[grep]] (and [[make]]).
On these systems [[SED]] will substitute to [[gsed]], which is the GNU version 
of the command.
Probably the reader can skip this chapter on a first reading.

The include file is structures similarly to a header file in C.
We use the same technique to prevent multiple inclusions.
The outline is as follows.
<<portability.mk>>=
ifndef PORTABILITY_MK
PORTABILITY_MK=true

<<system-specific configuration>>

<<the sed(1) utility>>
<<the grep(1) utility>>
<<the unzip(1) utility>>
<<some standard utilities>>

endif
@ Since this file provides system-dependent configuration, we allow the user to
provide a system-wide configuration file.
<<system-specific configuration>>=
PORTABILITY_CONF?=  ${HOME}/.mk.conf /etc/mk.conf
-include ${PORTABILITY_CONF}
@ The file in [[/etc/mk.conf]] is commonly available in BSDs.
However, since these files might not exist, make(1) should not yield a fatal 
error if the include directive fails.


\section{The ported utilities}

Two of the most frequently used utilities are sed(1) and grep(1).
The version of these that we want to use is the GNU version.
On Linux systems, this is the default.
On BSDs, however, they are available prefixed with the letter \enquote{g}.
The same goes to the make(1) utility, which means that we can use that fact to 
check for this.
<<the sed(1) utility>>=
ifeq (${MAKE},gmake)
SED?=     gsed
SEDex?=   gsed -E
else
SED?=     sed
SEDex?=   sed -E
endif
@ Similarly, we let
<<the grep(1) utility>>=
ifeq (${MAKE},gmake)
GREP=     ggrep
GREPex=   ggrep -E
else
GREP=     grep
GREPex=   grep -E
endif
@

Some other standard utilities that has not yet broken on any system are the 
following.
<<some standard utilities>>=
CAT?=     cat
MV?=      mv
CP?=      cp -R
LN?=      ln
@ The make(1) utility already sets [[RM = rm -f]] by default~\cite[Sect.\ 
10.3]{GNUMake}, so we need not repeat it.

Another utility which is used is wc(1), which is used to count words in 
[[tex.mk]].
<<some standard utilities>>=
WC?=      wc
WCw?=     wc -w
@

Quite commonly we want to open files with the user's desired application, e.g.\
to open PDFs in the user's PDF reader.
For this we use the xdg-open(1) utility.
<<some standard utilities>>=
XDGOPEN?= xdg-open
@

The unzip(1) utility is used in [[tex.mk]].
Unfortunately, MacOS ships with an ancient version of unzip(1), one which does 
not support the desired [[-DD]] option.
(The [[-DD]] option is desired to avoid unnecessary rebuilding by make(1).)
Hence we check if the system is Darwin, if so, we skip the [[-DD]] option.
<<the unzip(1) utility>>=
ifeq ($(shell uname),Darwin)
UNZIP?=   unzip
else
UNZIP?=   unzip -DD
endif
@

We also use gunzip(1) or uncompress(1).
<<the unzip(1) utility>>=
UNCOMPRESS?=  uncompress
@

We also use curl(1).
<<fetching files>>=
CURL?=        curl
@
