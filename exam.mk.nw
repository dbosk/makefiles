\section{Introduction and usage}%
\label{exam-intro}

Many courses use exams as the tool for assessment.
Usually the exam is repeated a few times during the year and over the years.
This is quite repetitive, so we want to make it as easy as possible.
This makefile, [[<<exam.mk>>]], will automate as much as possible using the 
[[examgen]] program~\cite{examgen}.
(It is recommended that you read the documentation of [[examgen]] before you 
continue, or at least run [[examgen -h]].)

We assume that the exams will have the following structure.
There is a main TeX file called [[exam-uniqueID.tex]].
If this is not the case, one will automatically be created using 
[[./exam-template.tex]] as the base.
This file contains the code which uses the exam document class and, in 
particular, contains the following code:
\begin{lstlisting}[language={[LaTeX]TeX}]
\begin{questions}
  \input{questions-ID.tex}
\end{questions}
\end{lstlisting}
The file [[questions-ID.tex]] will be automatically generated by the exam
generator.
The prefixes of the filenames can be controlled using the following variables:
<<variables>>=
EXAM_NAME?=     exam
EXAM_TEMPLATE?= template
EXAM_QNAME?=    questions
@

With this structure, we only need to keep track of the unique identifiers, 
\enquote{ID} in the example.
We will use [[EXAM_IDS]] as a space-separated list containing all IDs.
(The default is a single ID, which is today's date.)
<<variables>>=
EXAM_IDS?=    $(shell date +%y%m%d)
@

Now let us proceed to the contents, i.e.\ [[questions-ID.tex]].
The \acp{ILO} of a course rarely changes, so usually several exams share the 
same set of \acp{ILO}.
This means that we would like to generate exams with the same parameters for 
several exams, e.g.\ the same databases and the same tags.
These parameters are given to [[examgen]] as a set of tags, i.e.\ 
a space-separated list.
<<variables>>=
EXAM_TAGS?=     ILO1 ILO2 ... ILOn
@ [[examgen]] also needs to get the questions from somewhere, we will use 
[[EXAM_DBS]] as a space-separated list of question database files.
The default value is all previous exams\footnote{%
  This also includes all future exams, but [[examgen]] will ignore those since 
  they do not yet exist.
}.
<<variables>>=
EXAM_DBS?=      $(foreach id,${EXAM_IDS},${EXAM_QNAME}-${id}.tex)
@

Sometimes we might want a different set of tags or databases per exam.
E.g.\ we want to generate one exam per student, where each student has an 
individual set of \acp{ILO} to be assessed on.
For this reason we allow [[EXAM_TAGS-ID]] to override the contents of 
[[EXAM_TAGS]] when dealing with ID.

We can also pass specific flags to the examgen program using the [[EXAM_FLAGS]] 
variable.
We set the default value as follows.
<<variables>>=
EXAM_FLAGS?=        -NCE
@ Note that the flags can be target-specific too, i.e.\ by setting 
[[EXAM_FLAGS-ID]].

We conclude with a usage example.
\begin{example}
  This will generate two exams: [[exam-161014.pdf]] and [[exam-dbosk.pdf]].
  The first will be generated from the [[questions.tex]] database with the 
  complete tag set.
  The second will be generated from the same database, but only using the tag 
  \enquote{ILOn}.
  \begin{lstlisting}[language=make]
EXAM_IDS=   161014 dbosk

EXAM_TAGS=  ILO1 ILO2 ... ILOn
EXAM_DBS=   questions.tex

EXAM_TAGS-dbosk=  ILOn
  \end{lstlisting}
\end{example}


\section{Implementation}

We want to create a makefile [[<<exam.mk>>]] for inclusion.
The file will have the following outline:
<<exam.mk>>=
<<variables>>
<<generate targets for exam TeX files>>
<<generate targets for exam PDF files>>
<<generate targets for questions>>
@ As suggested above, each exam [[exam-ID.pdf]] depends on at least two files: 
[[exam-ID.tex]] and [[questions-ID.tex]].
First, we will describe how to generate [[exam-ID.tex]] from a template found in 
[[./exam-template.tex]] ([[<<generate targets for exam TeX files>>]]).
Then we will describe how we automatically generate these targets by iterating 
over the list in [[EXAM_IDS]] ([[<<generate targets for exam PDF files>>]]).
Finally, we will describe how we generate the questions.

\subsection{Generating targets for exam TeX files}

As mentioned in \cref{exam-intro}, we will generate the file [[exam-ID.tex]] 
based on [[exam-template.tex]] if it doesn't exist.
The [[exam]] prefix was controlled by [[EXAM_NAME]] and the template suffix 
controlled by [[EXAM_TEMPLATE]].
Thus we get this target structure:
<<generate targets for exam TeX files>>=
define exam_tex_files
${EXAM_NAME}-$(1).tex:
	${CAT} ${EXAM_NAME}-${EXAM_TEMPLATE}.tex | \
	  <<sed substitutions for exam with id in (1)>> \
	  > $$@
endef
$(foreach id,${EXAM_IDS},$(eval $(call exam_tex_files,${id})))
@ Note that we don't have any dependency.
Normally, it would be natural to add the template [[exam-template.tex]] as a 
dependency, however, we don't want to update old exams just because we update 
the template --- that should only affect future exams.

\subsection{Substituting fields from template}

To generate the exam file from the template, we perform the following 
substitutions:
<<sed substitutions for exam with id in (1)>>=
${SED} -e "s/\\\\today/${EXAM_DATE-$(1)}/g"
@

\subsection{Generating targets for exam PDFs}

We will not provide any recipe for compiling the PDFs, that is left for the user 
or the use of [[tex.mk]].
What we will do is the following:
<<generate targets for exam PDF files>>=
<<define target-specific variables>>
<<define callable exam definition>>
<<call the exam definition for each ID>>
@

We want the possibility of overriding [[EXAM_NAME]] and [[EXAM_QNAME]] for 
certain targets.
We let the user set them, but if unset we set them to the default values.
<<define target-specific variables>>=
define target_variables
EXAM_NAME-$(1)?=   ${EXAM_NAME}
EXAM_QNAME-$(1)?=  ${EXAM_QNAME}
endef
$(foreach id,${EXAM_IDS},$(eval $(call target_variables,${id})))
@

We do the same for the actual targets.
As stated above, we only set the dependencies and leave the recipe to the user 
(or [[tex.mk]]).
<<define callable exam definition>>=
define exam_target
${EXAM_NAME-$(1)}-$(1).pdf: ${EXAM_NAME-$(1)}-$(1).tex
${EXAM_NAME-$(1)}-$(1).pdf: ${EXAM_QNAME-$(1)}-$(1).tex
endef
@ Now we call the above variable and ask make(1) to evaluate it as code.
<<call the exam definition for each ID>>=
$(foreach id,${EXAM_IDS},$(eval $(call exam_target,${id})))
@

\subsection{Generating targets for exam questions}

We also said above that the file [[questions-ID.tex]] will automatically be 
generated by [[examgen]].
We will now provide the target that accomplishes just that.
(Since the exam depends on this file, we will automatically generate the 
questions when we try to make the exam --- if it does not already exist.)
The structure of the code will be similar as for the exam.
<<generate targets for questions>>=
<<define target-specific questions variables>>
<<define the questions target>>
@

The ID-specific variables are defined analogously to those for the exam.
The variables that are relevant to make specific are the following.
<<define target-specific questions variables>>=
define questions_variables
EXAM_TAGS-$(1)?=    ${EXAM_TAGS}
EXAM_DBS-$(1)?=     ${EXAM_DBS}
EXAM_FLAGS-$(1)?=   ${EXAM_FLAGS}
endef
$(foreach id,${EXAM_IDS},$(eval $(call questions_variables,${id})))
@

Finally, we can define target as follows.
The target file \enquote{questions-ID.tex} depends on the questions databases 
to exist.
Then the recipe simply runs [[examgen]] with the set parameters.
<<define the questions target>>=
define questions_target
.PRECIOUS: ${EXAM_QNAME-$(1)}-$(1).tex
${EXAM_QNAME-$(1)}-$(1).tex:
	examgen ${EXAM_FLAGS-$(1)} -d ${EXAM_DBS-$(1)} -t ${EXAM_TAGS-$(1)} > $$@
endef
$(foreach id,${EXAM_IDS},$(eval $(call questions_target,${id})))
@

