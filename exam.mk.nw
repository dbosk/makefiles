\section{Introduction and usage}

Many courses use exams as the tool for assessment.
Usually the exam is repeated a few times during the year and over the years.
This is quite repetitive, so we want to make it as easy as possible.
This makefile, [[<<exam.mk>>]], will automate as much as possible using the 
[[examgen]] program~\cite{examgen}.
(It is recommended that you read the documentation of [[examgen]] before you 
continue, or at least run [[examgen -h]].)

We assume that the course has its own directory, so no problem will arise if we
simply call the file containing the exam as \enquote{exam-YYMMDD.pdf}.
(The date can of course be replaced with any unique identifier.)
We will assume that the source code for the exam is a file called 
\enquote{exam-ID.tex} and that this file contains the following code:
\begin{lstlisting}[language={[LaTeX]TeX}]
\begin{questions}
  \input{questions-ID.tex}
\end{questions}
\end{lstlisting}
The file \enquote{questions-ID.tex} will be automatically generated by the exam
generator.
Thus we need to only keep track of the unique identifiers, \enquote{ID} in the 
example.
We will use [[EXAM_IDS]] as a space-separated list containing all IDs.
(The default is a single ID, which is today's date.)
<<variables>>=
EXAM_IDS?=    $(shell date +%y%m%d)
@

To the contents of the exam, i.e.\ \enquote{questions-ID.tex}.
The \acp{ILO} of a course rarely changes, so usually several exams share the 
same set of \acp{ILO}.
This means that we would like to generate exams with the same parameters for 
several exams, e.g.\ the same databases and the same tags.
These parameters are given to [[examgen]] as a set of tags, i.e.\ 
a space-separated list.
<<variables>>=
EXAM_TAGS?=     ILO1 ILO2 ... ILOn
@ [[examgen]] also needs to get the questions from somewhere, we will use 
[[EXAM_DBS]] as a space-separated list of question database files.
<<variables>>=
EXAM_DBS?=      questions.tex previous_exam1.tex previous_exam2.tex
@

Sometimes we might want a different set of tags or databases per exam.
E.g.\ we want to generate one exam per student, where each student has an 
individual set of \acp{ILO} to be assessed on.
For this reason we allow [[EXAM_TAGS-ID]] to override the contents of 
[[EXAM_TAGS]] when dealing with ID.

We conclude with a usage example:
\begin{lstlisting}[language=make]
EXAM_IDS=   161014 dbosk

EXAM_TAGS=  ILO1 ILO2 ... ILOn
EXAM_DBS=   questions.tex

EXAM_TAGS-dbosk=  ILOn
\end{lstlisting}
This will generate two exams: \enquote{exam-161014.pdf} and 
\enquote{exam-dbosk.pdf}.
The first will be generated from the \enquote{questions.tex} database with the 
complete tag set.
The second will be generated only using the tag \enquote{ILOn}.


\section{Implementation}

We want to create a makefile [[<<exam.mk>>]] for inclusion.
The file will have the following outline:
<<exam.mk>>=
<<variables>>
<<generate targets for exams>>
<<generate targets for questions>>
@

As suggested above, each exam \enquote{exam-ID.pdf} depends on at least two 
files: \enquote{exam-ID.tex} and \enquote{questions-ID.tex}.
We will automatically generate these targets by iterating over the list in 
[[EXAM_IDS]].
We will not provide any recipe, that is left for the user or the use of 
[[tex.mk]].
What we will do is the following:
<<generate targets for exams>>=
<<define callable exam definition>>
<<call the exam definition for each ID>>
@

We will use two variables to allow ourselves to change the file names for the 
exam and the questions.
We let the default be as stated above.
<<variables>>=
EXAM_NAME?=   exam
EXAM_QNAME?=  questions
@ We will also allow these to be target specific.

The callable definition will take one parameter, the variable [[1]], which 
contains the ID.
First we define the target specific variables, then we give the target and its 
dependencies (but no recipe).
<<define callable exam definition>>=
define exam_target
EXAM_NAME-$(1)?=   ${EXAM_NAME}
EXAM_QNAME-$(1)?=  ${EXAM_QNAME}
${EXAM_NAME-$(1)}-$(1).pdf: ${EXAM_NAME-$(1)}-$(1).tex
${EXAM_NAME-$(1)}-$(1).pdf: ${EXAM_QNAME-$(1)}-$(1).tex
endef
@ Now we call the above variable and ask make(1) to evaluate it as code.
<<call the exam definition for each ID>>=
$(foreach id,${EXAM_IDS},$(eval $(call exam_target,${id})))
@

We also said above that the file \enquote{questions-ID.tex} will automatically 
be generated by [[examgen]].
We will now provide the target that accomplishes just that.
(Since the exam depends on this file, we will automatically generate the 
questions when we try to make the exam.)
The structure of the code will be similar as for the exam.
<<generate targets for questions>>=
define questions_target
<<define ID-specific questions variables>>
<<define the questions target>>
endef
$(foreach id,${EXAM_IDS},$(eval $(call questions_target,${id})))
@

The ID-specific variables are defined analogously to those for the exam.
The variables that are relevant to make specific are the following.
<<define ID-specific questions variables>>=
EXAM_TAGS-$(1)?=    ${EXAM_TAGS}
EXAM_DBS-$(1)?=     ${EXAM_DBS}
EXAM_FLAGS-$(1)?=   ${EXAM_FLAGS}
@ This introduces a new variable [[EXAM_FLAGS]] which we set to the following 
default value.
<<variables>>=
EXAM_FLAGS?=        -NCE
@

Finally, we can define target as follows.
The target file \enquote{questions-ID.tex} depends on the questions databases 
to exist.
Then the recipe simply runs [[examgen]] with the set parameters.
<<define the questions target>>=
${EXAM_QNAME-$(1)}-$(1).tex: ${EXAM_DBS-$(1)}
	examgen ${EXAM_FLAGS-$(1)} -d ${EXAM_DBS-$(1)} -t ${EXAM_TAGS-$(1)} > $$@
@

